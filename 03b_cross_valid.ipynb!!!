{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5d74abdd",
   "metadata": {},
   "source": [
    "Author: Slawomir Kranc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "211b2cee",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.datasets import load_wine\n",
    "from sklearn.dummy import DummyClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.dummy import DummyClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "77f80b6d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " variant: random_state=42; KNeighbors train score = 0.7535211267605634\n",
      " variant: random_state=42; KNeighbors test score = 0.8333333333333334\n"
     ]
    }
   ],
   "source": [
    "def variant_a(load_wine):\n",
    "    wine = load_wine()\n",
    "    features = wine.data\n",
    "    target = wine.target\n",
    "    X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, shuffle=True, random_state=42)\n",
    "    #scaler = StandardScaler()\n",
    "    #X_train = scaler.fit_transform(X_train)\n",
    "    #X_test = scaler.fit_transform(X_test)\n",
    "    \n",
    "\n",
    "    kn_train_clf = KNeighborsClassifier(n_neighbors=5)\n",
    "    kn_train_clf = kn_train_clf.fit(X_train, y_train)\n",
    "\n",
    "    kn_test_clf = KNeighborsClassifier(n_neighbors=5)\n",
    "    kn_test_clf = kn_test_clf.fit(X_test, y_test)\n",
    "\n",
    "    kn_train_scr = kn_train_clf.score(X_train, y_train)\n",
    "    kn_test_scr = kn_test_clf.score(X_test, y_test)\n",
    "    \n",
    "    print(f\" variant: random_state=42; KNeighbors train score = {kn_train_scr}\")\n",
    "    print(f\" variant: random_state=42; KNeighbors test score = {kn_test_scr}\")\n",
    "    \n",
    "\n",
    "variant_a(load_wine)      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1a8f0463",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " variant: random_state=42 and stratify=y; KNeighbors train score = 0.7816901408450704\n",
      " variant: random_state=42 and stratify=y; KNeighbors test score = 0.8055555555555556\n"
     ]
    }
   ],
   "source": [
    "def variant_b(load_wine):\n",
    "    wine = load_wine()\n",
    "    features = wine.data\n",
    "    target = wine.target\n",
    "    X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, shuffle=True, random_state=42, stratify=target)\n",
    "    #scaler = StandardScaler()\n",
    "    #X_train = scaler.fit_transform(X_train)\n",
    "    #X_test = scaler.fit_transform(X_test)\n",
    "    \n",
    "\n",
    "    kn_train_clf = KNeighborsClassifier(n_neighbors=5)\n",
    "    kn_train_clf = kn_train_clf.fit(X_train, y_train)\n",
    "\n",
    "    kn_test_clf = KNeighborsClassifier(n_neighbors=5)\n",
    "    kn_test_clf = kn_test_clf.fit(X_test, y_test)\n",
    "\n",
    "    kn_train_scr = kn_train_clf.score(X_train, y_train)\n",
    "    kn_test_scr = kn_test_clf.score(X_test, y_test)\n",
    "    \n",
    "    print(f\" variant: random_state=42 and stratify=y; KNeighbors train score = {kn_train_scr}\")\n",
    "    print(f\" variant: random_state=42 and stratify=y; KNeighbors test score = {kn_test_scr}\")\n",
    "    \n",
    "\n",
    "variant_b(load_wine)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7d599c08",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " variant: random_state=224 and stratify=y; KNeighbors train score = 0.7887323943661971\n",
      " variant: random_state=224 and stratify=y; KNeighbors test score = 0.7777777777777778\n"
     ]
    }
   ],
   "source": [
    "def variant_c(load_wine):\n",
    "    wine = load_wine()\n",
    "    features = wine.data\n",
    "    target = wine.target\n",
    "    X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, shuffle=True, random_state=224, stratify=target)\n",
    "    #scaler = StandardScaler()\n",
    "    #X_train = scaler.fit_transform(X_train)\n",
    "    #X_test = scaler.fit_transform(X_test)\n",
    "    \n",
    "\n",
    "    kn_train_clf = KNeighborsClassifier(n_neighbors=5)\n",
    "    kn_train_clf = kn_train_clf.fit(X_train, y_train)\n",
    "\n",
    "    kn_test_clf = KNeighborsClassifier(n_neighbors=5)\n",
    "    kn_test_clf = kn_test_clf.fit(X_test, y_test)\n",
    "\n",
    "    kn_train_scr = kn_train_clf.score(X_train, y_train)\n",
    "    kn_test_scr = kn_test_clf.score(X_test, y_test)\n",
    "    \n",
    "    print(f\" variant: random_state=224 and stratify=y; KNeighbors train score = {kn_train_scr}\")\n",
    "    print(f\" variant: random_state=224 and stratify=y; KNeighbors test score = {kn_test_scr}\")\n",
    "    \n",
    "\n",
    "variant_c(load_wine)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "651d4ee8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " variant: random_state=224; KNeighbors train score = 0.7605633802816901\n",
      " variant: random_state=224; KNeighbors test score = 0.9166666666666666\n"
     ]
    }
   ],
   "source": [
    "def variant_d(load_wine):\n",
    "    wine = load_wine()\n",
    "    features = wine.data\n",
    "    target = wine.target\n",
    "    X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, shuffle=True, random_state=224)\n",
    "    #scaler = StandardScaler()\n",
    "    #X_train = scaler.fit_transform(X_train)\n",
    "    #X_test = scaler.fit_transform(X_test)\n",
    "    \n",
    "\n",
    "    kn_train_clf = KNeighborsClassifier(n_neighbors=5)\n",
    "    kn_train_clf = kn_train_clf.fit(X_train, y_train)\n",
    "\n",
    "    kn_test_clf = KNeighborsClassifier(n_neighbors=5)\n",
    "    kn_test_clf = kn_test_clf.fit(X_test, y_test)\n",
    "\n",
    "    kn_train_scr = kn_train_clf.score(X_train, y_train)\n",
    "    kn_test_scr = kn_test_clf.score(X_test, y_test)\n",
    "    \n",
    "    print(f\" variant: random_state=224; KNeighbors train score = {kn_train_scr}\")\n",
    "    print(f\" variant: random_state=224; KNeighbors test score = {kn_test_scr}\")\n",
    "    \n",
    "\n",
    "variant_d(load_wine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2be2986e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train score = 0.39849624060150374\n",
      "Test score = 0.4\n"
     ]
    }
   ],
   "source": [
    "wine = load_wine()\n",
    "features = wine.data\n",
    "target = wine.target\n",
    "X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.25, shuffle=True)\n",
    "scaler = StandardScaler()\n",
    "X_train = scaler.fit_transform(X_train)\n",
    "X_test = scaler.fit_transform(X_test)\n",
    "\n",
    "dm_train_clf = DummyClassifier()\n",
    "dm_train_clf = dm_train_clf.fit(X_train, y_train)\n",
    "\n",
    "dm_test_clf = DummyClassifier()\n",
    "dm_test_clf = dm_test_clf.fit(X_test, y_test)\n",
    "\n",
    "dummy_train_scr = dm_train_clf.score(X_train, y_train)\n",
    "dummy_test_scr = dm_test_clf.score(X_test, y_test)\n",
    "\n",
    "print(f\"Train score = {dummy_train_scr}\")\n",
    "print(f\"Test score = {dummy_test_scr}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3cccf32a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train score for next folds(5) = [0.4014084507042254, 0.4014084507042254, 0.4014084507042254, 0.3986013986013986, 0.3916083916083916]\n",
      "\n",
      "Test score for next folds(5) = [0.3888888888888889, 0.3888888888888889, 0.3888888888888889, 0.4, 0.42857142857142855]\n",
      "\n",
      "train count in next folds(5) = [array([47, 57, 38], dtype=int64), array([47, 57, 38], dtype=int64), array([47, 57, 38], dtype=int64), array([47, 57, 39], dtype=int64), array([48, 56, 39], dtype=int64)]\n",
      "\n",
      "test count in next folds(5) = [array([12, 14, 10], dtype=int64), array([12, 14, 10], dtype=int64), array([12, 14, 10], dtype=int64), array([12, 14,  9], dtype=int64), array([11, 15,  9], dtype=int64)]\n",
      "\n",
      "train shape in next folds(5) = [(142,), (142,), (142,), (143,), (143,)]\n",
      "\n",
      "test shape in next folds(5) = [(36,), (36,), (36,), (35,), (35,)]\n"
     ]
    }
   ],
   "source": [
    "dummy_train_list = []\n",
    "dummy_test_list = []\n",
    "train_count_list = []\n",
    "test_count_list = []\n",
    "train_shape_list = []\n",
    "test_shape_list = []\n",
    "\n",
    "wine_X, wine_y = load_wine(return_X_y=True)\n",
    "skf = StratifiedKFold(n_splits=5, random_state=None, shuffle=True)\n",
    "\n",
    "for train_index, test_index in skf.split(wine_X, wine_y):\n",
    "    \n",
    "    #display(\"TRAIN:\", train_index, \"TEST:\", test_index)\n",
    "    X_train, X_test = wine_X[train_index], wine_X[test_index]\n",
    "    y_train, y_test = wine_y[train_index], wine_y[test_index]\n",
    "\n",
    "    y_train_count = np.bincount(y_train)\n",
    "    y_test_count = np.bincount(y_test)\n",
    "    y_train_shape = np.shape(y_train)\n",
    "    y_test_shape = np.shape(y_test)\n",
    "    \n",
    "\n",
    "    dm_train_clf = DummyClassifier()\n",
    "    dm_train_clf = dm_train_clf.fit(X_train, y_train)\n",
    "\n",
    "    dm_test_clf = DummyClassifier()\n",
    "    dm_test_clf = dm_test_clf.fit(X_test, y_test)\n",
    "\n",
    "    dummy_train_scr = dm_train_clf.score(X_train, y_train)\n",
    "    dummy_test_scr = dm_test_clf.score(X_test, y_test)\n",
    "\n",
    "    dummy_train_list.append(dummy_train_scr)\n",
    "    dummy_test_list.append(dummy_test_scr)\n",
    "    \n",
    "    train_count_list.append(y_train_count)\n",
    "    test_count_list.append(y_test_count)\n",
    "    train_shape_list.append(y_train_shape)\n",
    "    test_shape_list.append(y_test_shape)\n",
    "    \n",
    "\n",
    "\n",
    "print(f\"Train score for next folds(5) = {dummy_train_list}\\n\")\n",
    "print(f\"Test score for next folds(5) = {dummy_test_list}\\n\")\n",
    "print(f\"train count in next folds(5) = {train_count_list}\\n\")\n",
    "print(f\"test count in next folds(5) = {test_count_list}\\n\")\n",
    "print(f\"train shape in next folds(5) = {train_shape_list}\\n\")\n",
    "print(f\"test shape in next folds(5) = {test_shape_list}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:machine_learning] *",
   "language": "python",
   "name": "conda-env-machine_learning-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
